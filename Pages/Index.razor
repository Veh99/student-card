@page "/"
@using System.Text.Json;
@using System.Text.Json.Serialization;

<h1>Student Card</h1>
<h3>FIO</h3>
<input @bind="fio"/>
<h3>Curriculum</h3>
<h4>Faculty</h4>
<textarea @bind="faculty"></textarea>
<h4>Speciality</h4>
<textarea @bind="speciality"></textarea>
<h4>Course</h4>
<textarea @bind="course"></textarea>
<h4>Group</h4>
<textarea @bind="group"></textarea>
<h3>Adress</h3>
<h4>City</h4>
<textarea @bind="city"></textarea>
<h4>Post Index</h4>
<textarea @bind="postIndex"></textarea>
<h4>Street</h4>
<textarea @bind="street"></textarea>
<h3>Contacts</h3>
<h4>Phone</h4>
<textarea @bind="phone"></textarea>
<h4>Email</h4>
<textarea @bind="email"></textarea>
<table @bind="table" ></table>

<br />
<button @onclick="ShowStudentTable">Show Student Table</button>
<button @onclick="AddStudent">Add Student</button>

<br />
<button @onclick="SortByFaculty">Sort by faculty</button>
<input @bind="sortByFaculty">
<button @onclick="SortBySpeciality">Sort by speciality</button>
<input @bind="sortBySpeciality">
<br
<button @onclick="SortByCourse">Sort by course</button>
<input @bind="sortByCourse">
<button @onclick="SortByGroup">Sort by group</button>
<input @bind="sortByGroup">

<br
<table class="table">
    <thead>
        <tr>
            <th>FIO</th>
            <th>CURRICULUM</th>
            <th>ADDRESS</th>
            <th>CONTACTS</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var student in studentsList)
        {
            <tr>
                <td>@student.FIO</td>
                <td>Faculty: @student.Curriculum.Faculty 
                    Speciality: @student.Curriculum.Speciality 
                    Course: @student.Curriculum.Cource 
                    Group: @student.Curriculum.Group</td>
                <td>City: @student.Address.City 
                    PostIndex: @student.Address.PostIndex 
                    Street: @student.Address.Street</td>
                <td>Contacts: @student.Contacts.Phone 
                    Email: @student.Contacts.Email</td>
                <td><button @onclick="@(() => ClickToCheckOut(student))">Click to check out</button></td>
                <button @onclick="@( () => Edit(student) )">Click to edit</button>
            </tr>
        }
    </tbody>
</table>

@code
{

    static string fio = string.Empty;
    static string faculty = string.Empty;
    static string speciality = string.Empty;
    static string course = string.Empty;
    static string group = string.Empty;
    static string city = string.Empty;
    static string postIndex = string.Empty;
    static string street = string.Empty;
    static string phone = string.Empty;
    static string email = string.Empty;
    static string sortByFaculty = string.Empty;
    static string sortBySpeciality = string.Empty;
    static string sortByGroup = string.Empty;
    static string sortByCourse = string.Empty;
    static string path = "C:\\Users\\User\\Desktop\\INFOCOM\\StudentInfo\\";
    static List<string> pathToJsonFiles = Directory.GetFiles(path, "*.json", SearchOption.TopDirectoryOnly).ToList();
    static List<Student> studentsList = new List<Student>();
    static List<Student> sortedStudentsList = new List<Student>();


    
    static public void AddStudent()
    {
        if (fio != string.Empty && faculty != string.Empty && speciality != string.Empty && course != string.Empty && group != string.Empty && city != string.Empty && postIndex != string.Empty && street != string.Empty && phone != string.Empty && email != string.Empty)
        {
            var curriculum = new Curriculum(faculty, speciality, course, group);
            var address = new Address(city, postIndex, street);
            var contacts = new Contacts(phone, email);
            var student = new Student(fio, curriculum, address, contacts);
            string json = JsonSerializer.Serialize(student);
            File.WriteAllText(path + student.FIO + ".json", json);
            studentsList.Add(student);
        }
    }

    static public void ShowStudentTable()
    {
        studentsList.Clear();
        foreach(string jsonFile in pathToJsonFiles)
        {
            string json = File.ReadAllText(jsonFile);
            Student? student = JsonSerializer.Deserialize<Student>(json);
            studentsList.Add(student);
        }
    }

    static public void SortByFaculty()
    {
        ShowStudentTable();
        if(sortByFaculty != string.Empty)
        {
            var result = studentsList.Where(s => s.Curriculum.Faculty == sortByFaculty);
            studentsList = result.ToList();
        }

    }
    static public void SortBySpeciality()
    {
        ShowStudentTable();
        if(sortBySpeciality != string.Empty)
        {
            var result = studentsList.Where(s => s.Curriculum.Speciality == sortBySpeciality);
            studentsList = result.ToList();
        }
        
    }
    static public void SortByCourse()
    {
        ShowStudentTable();
        if (sortByCourse != string.Empty)
        {
            var result = studentsList.Where(s => s.Curriculum.Cource == sortByCourse);
            studentsList = result.ToList();
        }
    }
    static public void SortByGroup()
    {
        ShowStudentTable();
        if (sortByGroup != string.Empty)
        {
            var result = studentsList.Where(s => s.Curriculum.Group == sortByGroup);
            studentsList = result.ToList();
        }
    }

    static public void Edit(Student student)
    {
        ShowStudentTable();
        if (fio != string.Empty && faculty != string.Empty && speciality != string.Empty && course != string.Empty && group != string.Empty && city != string.Empty && postIndex != string.Empty && street != string.Empty && phone != string.Empty && email != string.Empty)
        {
            try
            {
                string oldJson = JsonSerializer.Serialize(student);
                studentsList.Remove(student);
                foreach (string jsonFile in pathToJsonFiles)
                {
                    string fileInfo = File.ReadAllText(jsonFile).Trim();
                    if (oldJson == fileInfo) File.Delete(jsonFile);
                }
                var curriculum = new Curriculum(faculty, speciality, course, group);
                var address = new Address(city, postIndex, street);
                var contacts = new Contacts(phone, email);
                var editedStudent = new Student(fio, curriculum, address, contacts);
                studentsList.Add(editedStudent);
                string newJson = JsonSerializer.Serialize(editedStudent);
                File.WriteAllText(path + student.FIO + ".json", newJson);
            }
            catch(Exception ex)
            {
                throw(ex);
            }
        }
    }
   

    static public void ClickToCheckOut(Student student)
    {
        fio = student.FIO;
        faculty = student.Curriculum.Faculty;
        speciality = student.Curriculum.Speciality;
        course = student.Curriculum.Cource;
        group = student.Curriculum.Group;
        city = student.Address.City;
        postIndex = student.Address.PostIndex;
        street = student.Address.Street;
        phone = student.Contacts.Phone;
        email = student.Contacts.Email;
    }

   

    public class Student
    {
        public string FIO { get; set; }
        public Curriculum Curriculum { get; set; }
        public Address Address { get; set; }
        public Contacts Contacts { get; set; }

        
        public Student(string FIO, Curriculum Curriculum, Address Address, Contacts Contacts)
        {
            this.FIO = FIO;
            this.Curriculum = Curriculum;
            this.Address = Address;
            this.Contacts = Contacts;
        }
    }

    public class Curriculum
    {
        public string Faculty { get; set; }
        public string Speciality { get; set; }
        public string Cource { get; set; }
        public string Group { get; set; }

        
        public Curriculum(string Faculty, string Speciality, string Cource, string Group)
        {
            this.Faculty = Faculty;
            this.Speciality = Speciality;
            this.Cource = Cource;
            this.Group = Group;
        }
    }

    public class Address
    {
        public string City { get; set; }
        public string PostIndex { get; set; }
        public string Street { get; set; }

        
        public Address(string City, string PostIndex, string Street)
        {
            this.City = City;
            this.PostIndex = PostIndex;
            this.Street = Street;
        }
    }

    public class Contacts
    {
        public string Phone { get; set; }
        public string Email { get; set; }

        
        public Contacts(string Phone, string Email)
        {
            this.Phone = Phone;
            this.Email = Email;
        }
    }
}
    

    